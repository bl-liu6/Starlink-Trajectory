{"version":3,"sources":["assets/images/starlink_logo.svg","components/Header.js","constants.js","components/SatSetting.js","assets/images/satellite.svg","components/SatelliteList.js","components/WorldMap.js","components/Main.js","components/Footer.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_jsxs","className","children","_jsx","src","starlinkLogo","alt","Component","SAT_API_KEY","SatSettingForm","_this","_len","length","args","Array","_key","call","concat","showSatellite","e","preventDefault","props","form","validateFields","err","values","onShow","getFieldDecorator","this","Form","_objectSpread","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","message","InputNumber","min","max","style","width","placeholder","Button","type","htmlType","textAlign","SatSetting","create","name","SatelliteList","state","selected","showMap","onShowMap","onChange","_e$target","target","dataInfo","checked","list","addOrRemove","setState","item","status","found","some","entry","satid","push","filter","_this2","_this$props","satInfo","isLoad","satList","above","size","disabled","onClick","Spin","tip","List","itemLayout","dataSource","renderItem","actions","Checkbox","Meta","avatar","Avatar","satellite","title","satname","description","launchDate","prevProps","prevState","snapshot","height","WorldMap1","track","data","hasOwnProperty","Error","len","positions","context2","observerData","duration","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","fillText","d3TimeFormat","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","_this$map","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","isLoading","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","console","log","_this3","satData","_this$props$observerD","latitude","longitude","elevation","endTime","altitude","urls","url","Promise","all","arr","ref","Main","preState","_toConsumableArray","showNearbySatellite","setting","isLoadingList","fetchSatellite","response","error","_this$state","Row","Col","WorldMap","Footer","App","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a7f5b319.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/starlink_logo.a7afe33a.svg\";","import React, {Component} from 'react';\nimport starlinkLogo  from '../assets/images/starlink_logo.svg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={starlinkLogo} className=\"App-logo\" alt=\"logo\" />\n                <p className=\"title\">\n                    StarLink Tracker\n                </p>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","export const SAT_API_KEY = \"Z4LPEL-X77V35-BYZ4XZ-5239\";\nexport const STARLINK_CATEGORY = \"52\";\nexport const NEARBY_SATELLITE = \"rest/v1/satellite/above\";\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\nexport const SATELLITE_POSITION_URL = \"rest/v1/satellite/positions\";\n","import React, { Component } from \"react\";\nimport { Form, Button, InputNumber } from \"antd\";\n\nclass SatSettingForm extends Component {\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 11 }\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 13 }\n            }\n        };\n        return (\n            <Form\n                {...formItemLayout}\n                className=\"sat-setting\"\n                onSubmit={this.showSatellite}\n            >\n                <Form.Item label=\"Longitude(degrees)\">\n                    {getFieldDecorator(\"longitude\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Longitude\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            min={-180}\n                            max={180}\n                            style={{ width: \"100%\" }}\n                            placeholder=\"Please input Longitude\"\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Latitude(degrees)\">\n                    {getFieldDecorator(\"latitude\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Latitude\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Latitude\"\n                            min={-90}\n                            max={90}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Elevation(meters)\">\n                    {getFieldDecorator(\"elevation\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Elevation\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Elevation\"\n                            min={-413}\n                            max={8850}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Altitude(degrees)\">\n                    {getFieldDecorator(\"altitude\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Altitude\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Altitude\"\n                            min={0}\n                            max={90}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label=\"Duration(secs)\">\n                    {getFieldDecorator(\"duration\", {\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please input your Duration\"\n                            }\n                        ]\n                    })(\n                        <InputNumber\n                            placeholder=\"Please input Duration\"\n                            min={0}\n                            max={90}\n                            style={{ width: \"100%\" }}\n                        />\n                    )}\n                </Form.Item>\n                <Form.Item className=\"show-nearby\">\n                    <Button\n                        type=\"primary\"\n                        htmlType=\"submit\"\n                        style={{ textAlign: \"center\" }}\n                    >\n                        Find Nearby Satellite\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n\n    showSatellite = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                // console.log('Received values of form: ', values);\n                this.props.onShow(values);\n            }\n        });\n    };\n}\n\nconst SatSetting = Form.create({ name: \"satellite-setting\" })(SatSettingForm);\n\nexport default SatSetting;\n","export default __webpack_public_path__ + \"static/media/satellite.3dadd676.svg\";","import React, {Component} from 'react';\nimport { Button, Spin, List, Avatar, Checkbox } from 'antd';\n\nimport satellite from '../assets/images/satellite.svg';\n\nclass SatelliteList extends Component {\n    state = {\n        selected: []\n    }\n\n    render() {\n        const { selected } = this.state;\n        const {satInfo, isLoad} = this.props;\n        const satList = satInfo ? satInfo.above : [];\n\n        return (\n            <div className=\"sat-list-box\">\n                <Button className=\"sat-list-btn\" size=\"large\"\n                        disabled={ selected.length === 0}\n                        onClick={this.showMap} >\n                    Track on the map\n                </Button>\n                <hr/>\n                {\n                    isLoad ?\n                        <div className=\"spin-box\">\n                            <Spin tip=\"Loading...\" size=\"large\"/>\n                        </div>\n                        :\n                        <List className=\"sat-list\"\n                              itemLayout=\"horizontal\"\n                              dataSource={satList}\n                              renderItem={ item => (\n                                  <List.Item actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}>\n                                      <List.Item.Meta\n                                          avatar={<Avatar src={satellite} size=\"large\" alt=\"satellite\"/>}\n                                          title={<p>{item.satname}</p>}\n                                          description={`Launch Date: ${item.launchDate}`}\n                                      />\n                                  </List.Item>\n                              )}\n                        />\n                }\n            </div>\n        );\n    }\n\n    showMap = () => {\n        const { selected } = this.state;\n        this.props.onShowMap(selected);\n    }\n\n    onChange = e => {\n        const { dataInfo, checked } = e.target;\n        const { selected } = this.state;\n        const list = this.addOrRemove(dataInfo, checked, selected);\n        this.setState({\n            selected: list\n        })\n    }\n\n    addOrRemove = (item, status, list) => {\n        const found = list.some( entry => entry.satid === item.satid );\n\n        if(status && !found) {\n            list.push(item);\n        }\n\n        if(!status && found) {\n            list = list.filter( entry => entry.satid !== item.satid);\n        }\n\n        return list;\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevProps.satInfo !== this.props.satInfo) {\n            this.setState({selected: []})\n        }\n    }\n}\n\nexport default SatelliteList;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Spin } from \"antd\";\nimport { feature } from \"topojson-client\";\nimport { geoKavrayskiy7 } from \"d3-geo-projection\";\nimport { geoGraticule, geoPath } from \"d3-geo\";\nimport { select as d3Select } from \"d3-selection\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\n\nimport {\n    WORLD_MAP_URL,\n    SATELLITE_POSITION_URL,\n    SAT_API_KEY\n} from \"../constants\";\n\nconst width = 960;\nconst height = 600;\n\nclass WorldMap1 extends Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoading: false,\n            isDrawing: false\n        };\n        this.map = null;\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\n        this.refMap = React.createRef();\n        this.refTrack = React.createRef();\n    }\n\n    componentDidMount() {\n        axios\n            .get(WORLD_MAP_URL)\n            .then(res => {\n                const { data } = res;\n                const land = feature(data, data.objects.countries).features;\n                this.generateMap(land);\n            })\n            .catch(e => {\n                console.log(\"err in fetch map data \", e.message);\n            });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.satData !== this.props.satData) {\n            const {\n                latitude,\n                longitude,\n                elevation,\n                altitude,\n                duration\n            } = this.props.observerData;\n            const endTime = duration * 60;\n\n            this.setState({\n                isLoading: true\n            });\n\n            const urls = this.props.satData.map(sat => {\n                const { satid } = sat;\n                const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n\n                return axios.get(url);\n            });\n\n            Promise.all(urls)\n                .then(res => {\n                    const arr = res.map(sat => sat.data);\n                    this.setState({\n                        isLoading: false,\n                        isDrawing: true\n                    });\n\n                    if (!prevState.isDrawing) {\n                        this.track(arr);\n                    } else {\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\n                        oHint.innerHTML =\n                            \"Please wait for these satellite animation to finish before selection new ones!\";\n                    }\n                })\n                .catch(e => {\n                    console.log(\"err in fetch satellite position -> \", e.message);\n                });\n        }\n    }\n\n    track = data => {\n        if (!data[0].hasOwnProperty(\"positions\")) {\n            throw new Error(\"no position data\");\n            return;\n        }\n\n        const len = data[0].positions.length;\n        const { duration } = this.props.observerData;\n        const { context2 } = this.map;\n\n        let now = new Date();\n\n        let i = 0;\n\n        let timer = setInterval(() => {\n            let ct = new Date();\n\n            let timePassed = i === 0 ? 0 : ct - now;\n            let time = new Date(now.getTime() + 60 * timePassed);\n\n            context2.clearRect(0, 0, width, height);\n\n            context2.font = \"bold 14px sans-serif\";\n            context2.fillStyle = \"#333\";\n            context2.textAlign = \"center\";\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n            if (i >= len) {\n                clearInterval(timer);\n                this.setState({ isDrawing: false });\n                const oHint = document.getElementsByClassName(\"hint\")[0];\n                oHint.innerHTML = \"\";\n                return;\n            }\n\n            data.forEach(sat => {\n                const { info, positions } = sat;\n                this.drawSat(info, positions[i]);\n            });\n\n            i += 60;\n        }, 1000);\n    };\n\n    drawSat = (sat, pos) => {\n        const { satlongitude, satlatitude } = pos;\n\n        if (!satlongitude || !satlatitude) return;\n\n        const { satname } = sat;\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n\n        const { projection, context2 } = this.map;\n        const xy = projection([satlongitude, satlatitude]);\n\n        context2.fillStyle = this.color(nameWithNumber);\n        context2.beginPath();\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n        context2.fill();\n\n        context2.font = \"bold 11px sans-serif\";\n        context2.textAlign = \"center\";\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    render() {\n        const { isLoading } = this.state;\n        return (\n            <div className=\"map-box\">\n                {isLoading ? (\n                    <div className=\"spinner\">\n                        <Spin tip=\"Loading...\" size=\"large\" />\n                    </div>\n                ) : null}\n                <canvas className=\"map\" ref={this.refMap} />\n                <canvas className=\"track\" ref={this.refTrack} />\n                <div className=\"hint\" />\n            </div>\n        );\n    }\n\n    generateMap = land => {\n        const projection = geoKavrayskiy7()\n            .scale(170)\n            .translate([width / 2, height / 2])\n            .precision(0.1);\n\n        const graticule = geoGraticule();\n\n        const canvas = d3Select(this.refMap.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const canvas2 = d3Select(this.refTrack.current)\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n\n        const context = canvas.node().getContext(\"2d\");\n        const context2 = canvas2.node().getContext(\"2d\");\n\n        let path = geoPath()\n            .projection(projection)\n            .context(context);\n\n        land.forEach(ele => {\n            context.fillStyle = \"#B3DDEF\";\n            context.strokeStyle = \"#000\";\n            context.globalAlpha = 0.7;\n            context.beginPath();\n            path(ele);\n            context.fill();\n            context.stroke();\n\n            context.strokeStyle = \"rgba(220, 220, 220, 0.1)\";\n            context.beginPath();\n            path(graticule());\n            context.lineWidth = 0.1;\n            context.stroke();\n\n            context.beginPath();\n            context.lineWidth = 0.5;\n            path(graticule.outline());\n            context.stroke();\n        });\n\n        this.map = {\n            projection: projection,\n            graticule: graticule,\n            context: context,\n            context2: context2\n        };\n    };\n}\n\nexport default WorldMap1;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Row, Col } from \"antd\";\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from \"../constants\";\nimport SatSetting from \"./SatSetting\";\nimport SatelliteList from \"./SatelliteList\";\nimport WorldMap from \"./WorldMap\";\n\nclass Main extends Component {\n    constructor() {\n        super();\n        this.state = {\n            satInfo: null,\n            satList: null,\n            setting: null,\n            isLoadingList: false\n        };\n    }\n    render() {\n        const { isLoadingList, satInfo, satList, setting } = this.state;\n        return (\n            <Row className=\"main\">\n                <Col span={8} className=\"left-side\">\n                    <SatSetting onShow={this.showNearbySatellite} />\n                    <SatelliteList\n                        isLoad={isLoadingList}\n                        satInfo={satInfo}\n                        onShowMap={this.showMap}\n                    />\n                </Col>\n                <Col span={16} className=\"right-side\">\n                    <WorldMap satData={satList} observerData={setting} />\n                </Col>\n            </Row>\n        );\n    }\n\n    showMap = selected => {\n        this.setState(preState => ({\n            ...preState,\n            satList: [...selected]\n        }));\n    };\n\n    showNearbySatellite = setting => {\n        this.setState({\n            isLoadingList: true,\n            setting: setting\n        });\n        this.fetchSatellite(setting);\n    };\n\n    fetchSatellite = setting => {\n        const { latitude, longitude, elevation, altitude } = setting;\n        const url = `/api/${NEARBY_SATELLITE}/${latitude}/${longitude}/${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n\n        this.setState({\n            isLoadingList: true\n        });\n\n        axios\n            .get(url)\n            .then(response => {\n                console.log(response.data);\n                this.setState({\n                    satInfo: response.data,\n                    isLoadingList: false\n                });\n            })\n            .catch(error => {\n                console.log(\"err in fetch satellite -> \", error);\n            });\n    };\n}\n\nexport default Main;\n","import React, {Component} from 'react';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                ©2020 StarLink Tracker. All Rights Reserved. Website Made by Your name\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header />\n            <Main />\n            <Footer />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nreportWebVitals();\n"],"sourceRoot":""}